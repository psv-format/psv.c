
// IANA CBOR Headers
// Source: https://github.com/mofosyne/iana-headers

typedef enum cbor_simple_value_t {
  /* Autogenerated IANA CBOR Content-Formats (Source: https://www.iana.org/assignments/cbor-simple-values/cbor-simple-values.xhtml#simple) */

  /* 0-19 : Standards Action */
  // False; Ref: [RFC8949]
  CBOR_SIMPLE_VALUE_FALSE = 20,
  // True; Ref: [RFC8949]
  CBOR_SIMPLE_VALUE_TRUE = 21,
  // Null; Ref: [RFC8949]
  CBOR_SIMPLE_VALUE_NULL = 22,
  // Undefined; Ref: [RFC8949]
  CBOR_SIMPLE_VALUE_UNDEFINED = 23

  /* 32-255 : Specification Required */
} cbor_simple_value_t;

typedef enum cbor_tag_t {
  /* Autogenerated IANA CBOR Tags (Source: https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml#tags) */

  /* 0-23 : Standards Action */
  // Standard date/time string; see Section 3.4.1; Ref: [RFC8949]
  CBOR_TAG_STD_DATE_TIME_STRING = 0ULL,
  // Epoch-based date/time; see Section 3.4.2; Ref: [RFC8949]
  CBOR_TAG_EPOCH_BASED_DATE_TIME = 1ULL,
  // Unsigned bignum; see Section 3.4.3; Ref: [RFC8949]
  CBOR_TAG_UNSIGNED_BIGNUM = 2ULL,
  // Negative bignum; see Section 3.4.3; Ref: [RFC8949]
  CBOR_TAG_NEGATIVE_BIGNUM = 3ULL,
  // Decimal fraction; see Section 3.4.4; Ref: [RFC8949]
  CBOR_TAG_DECIMAL_FRACTION = 4ULL,
  // Bigfloat; see Section 3.4.4; Ref: [RFC8949]
  CBOR_TAG_BIGFLOAT = 5ULL,
  // COSE Single Recipient Encrypted Data Object; Ref: [RFC9052]
  CBOR_TAG_COSE_SINGLE_RECIPIENT_ENCRYPTED_DATA_OBJECT = 16ULL,
  // COSE Mac w/o Recipients Object; Ref: [RFC9052]
  CBOR_TAG_COSE_MAC_W_O_RECIPIENTS_OBJECT = 17ULL,
  // COSE Single Signer Data Object; Ref: [RFC9052]
  CBOR_TAG_COSE_SINGLE_SIGNER_DATA_OBJECT = 18ULL,
  // COSE standalone V2 countersignature; Ref: [RFC9338]
  CBOR_TAG_COSE_STANDALONE_V2_COUNTERSIGNATURE = 19ULL,
  // Expected conversion to base64url encoding; see Section 3.4.5.2; Ref: [RFC8949]
  CBOR_TAG_EXPECTED_CONVERSION_TO_BASE64URL_ENCODING = 21ULL,
  // Expected conversion to base64 encoding; see Section 3.4.5.2; Ref: [RFC8949]
  CBOR_TAG_EXPECTED_CONVERSION_TO_BASE64_ENCODING = 22ULL,
  // Expected conversion to base16 encoding; see Section 3.4.5.2; Ref: [RFC8949]
  CBOR_TAG_EXPECTED_CONVERSION_TO_BASE16_ENCODING = 23ULL,

  /* 24-32767 : Specification Required */
  // Encoded CBOR data item; see Section 3.4.5.1; Ref: [RFC8949]
  CBOR_TAG_ENCODED_CBOR_DATA_ITEM = 24ULL,
  // reference the nth previously seen string; Ref: [http://cbor.schmorp.de/stringref][Marc_A._Lehmann]
  CBOR_TAG_REF_THE_NTH_PREV_SEEN_STRING = 25ULL,
  // Serialised Perl object with classname and constructor arguments; Ref: [http://cbor.schmorp.de/perl-object][Marc_A._Lehmann]
  CBOR_TAG_SERIALISED_PERL_OBJ_WITH_CLASSNAME_CONSTRUCTOR_ARG = 26ULL,
  // Serialised language-independent object with type name and constructor arguments; Ref: [http://cbor.schmorp.de/generic-object][Marc_A._Lehmann]
  CBOR_TAG_SERIALISED_LANG_INDEP_OBJ_WITH_TYPE_NAME_CONSTRUCTOR_ARG = 27ULL,
  // mark value as (potentially) shared; Ref: [http://cbor.schmorp.de/value-sharing][Marc_A._Lehmann]
  CBOR_TAG_MARK_VALUE_AS_SHARED = 28ULL,
  // reference nth marked value; Ref: [http://cbor.schmorp.de/value-sharing][Marc_A._Lehmann]
  CBOR_TAG_REF_NTH_MARKED_VALUE = 29ULL,
  // Rational number; Ref: [http://peteroupc.github.io/CBOR/rational.html][Peter_Occil]
  CBOR_TAG_RATIONAL_NUMBER = 30ULL,
  // Absent value in a CBOR Array; Ref: [https://github.com/svaarala/cbor-specs/blob/master/cbor-absent-tag.rst][Sami_Vaarala]
  CBOR_TAG_ABSENT_VALUE_IN_A_CBOR_ARRAY = 31ULL,
  // URI; see Section 3.4.5.3; Ref: [RFC8949]
  CBOR_TAG_URI = 32ULL,
  // base64url; see Section 3.4.5.3; Ref: [RFC8949]
  CBOR_TAG_BASE64URL = 33ULL,
  // base64; see Section 3.4.5.3; Ref: [RFC8949]
  CBOR_TAG_BASE64 = 34ULL,
  // Regular expression; see Section 2.4.4.3; Ref: [RFC7049]
  CBOR_TAG_REGULAR_EXPRESSION = 35ULL,
  // MIME message; see Section 3.4.5.3; Ref: [RFC8949]
  CBOR_TAG_MIME_MSG = 36ULL,
  // Binary UUID ([RFC-ietf-uuidrev-rfc4122bis-14, Section 4]); Ref: [https://github.com/lucas-clemente/cbor-specs/blob/master/uuid.md][Lucas_Clemente]
  CBOR_TAG_BINARY_UUID = 37ULL,
  // Language-tagged string; Ref: [RFC9290, Appendix A]
  CBOR_TAG_LANGUAGE_TAGGED_STRING = 38ULL,
  // Identifier; Ref: [https://github.com/lucas-clemente/cbor-specs/blob/master/id.md][Lucas_Clemente]
  CBOR_TAG_ID = 39ULL,
  // Multi-dimensional Array, row-major order; Ref: [RFC8746]
  CBOR_TAG_MULTI_DIMENSIONAL_ARRAY_ROW_MAJOR_ORDER = 40ULL,
  // Homogeneous Array; Ref: [RFC8746]
  CBOR_TAG_HOMOGENEOUS_ARRAY = 41ULL,
  // IPLD content identifier; Ref: [https://github.com/ipld/cid-cbor/][Volker_Mische]
  CBOR_TAG_IPLD_CONTENT_ID = 42ULL,
  // YANG bits datatype; see Section 6.7.; Ref: [RFC9254]
  CBOR_TAG_YANG_BITS_DATATYPE = 43ULL,
  // YANG enumeration datatype; see Section 6.6.; Ref: [RFC9254]
  CBOR_TAG_YANG_ENUMERATION_DATATYPE = 44ULL,
  // YANG identityref datatype; see Section 6.10.; Ref: [RFC9254]
  CBOR_TAG_YANG_IDENTITYREF_DATATYPE = 45ULL,
  // YANG instance-identifier datatype; see Section 6.13.; Ref: [RFC9254]
  CBOR_TAG_YANG_INSTANCE_ID_DATATYPE = 46ULL,
  // YANG Schema Item iDentifier (sid); see Section 3.2.; Ref: [RFC9254]
  CBOR_TAG_YANG_SCHEMA_ITEM_ID = 47ULL,
  // IEEE MAC Address; Ref: [RFC9542]
  CBOR_TAG_IEEE_MAC_ADDRESS = 48ULL,
  // IPv4, [prefixlen,IPv4], [IPv4,prefixpart]; Ref: [RFC9164]
  CBOR_TAG_IPV4 = 52ULL,
  // IPv6, [prefixlen,IPv6], [IPv6,prefixpart]; Ref: [RFC9164]
  CBOR_TAG_IPV6 = 54ULL,
  // CBOR Web Token (CWT); Ref: [RFC8392][Michael_B._Jones]
  CBOR_TAG_CBOR_WEB_TOKEN = 61ULL,
  // Encoded CBOR Sequence [RFC8742]; Ref: [draft-bormann-cbor-notable-tags-02, Section 2.1]
  CBOR_TAG_ENCODED_CBOR_SEQUENCE = 63ULL,
  // uint8 Typed Array; Ref: [RFC8746]
  CBOR_TAG_UINT8_TYPED_ARRAY = 64ULL,
  // uint16, big endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_UINT16_BIG_ENDIAN_TYPED_ARRAY = 65ULL,
  // uint32, big endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_UINT32_BIG_ENDIAN_TYPED_ARRAY = 66ULL,
  // uint64, big endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_UINT64_BIG_ENDIAN_TYPED_ARRAY = 67ULL,
  // uint8 Typed Array, clamped arithmetic; Ref: [RFC8746]
  CBOR_TAG_UINT8_TYPED_ARRAY_CLAMPED_ARITHMETIC = 68ULL,
  // uint16, little endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_UINT16_LITTLE_ENDIAN_TYPED_ARRAY = 69ULL,
  // uint32, little endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_UINT32_LITTLE_ENDIAN_TYPED_ARRAY = 70ULL,
  // uint64, little endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_UINT64_LITTLE_ENDIAN_TYPED_ARRAY = 71ULL,
  // sint8 Typed Array; Ref: [RFC8746]
  CBOR_TAG_SINT8_TYPED_ARRAY = 72ULL,
  // sint16, big endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_SINT16_BIG_ENDIAN_TYPED_ARRAY = 73ULL,
  // sint32, big endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_SINT32_BIG_ENDIAN_TYPED_ARRAY = 74ULL,
  // sint64, big endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_SINT64_BIG_ENDIAN_TYPED_ARRAY = 75ULL,
  // sint16, little endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_SINT16_LITTLE_ENDIAN_TYPED_ARRAY = 77ULL,
  // sint32, little endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_SINT32_LITTLE_ENDIAN_TYPED_ARRAY = 78ULL,
  // sint64, little endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_SINT64_LITTLE_ENDIAN_TYPED_ARRAY = 79ULL,
  // IEEE 754 binary16, big endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_IEEE_754_BINARY16_BIG_ENDIAN_TYPED_ARRAY = 80ULL,
  // IEEE 754 binary32, big endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_IEEE_754_BINARY32_BIG_ENDIAN_TYPED_ARRAY = 81ULL,
  // IEEE 754 binary64, big endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_IEEE_754_BINARY64_BIG_ENDIAN_TYPED_ARRAY = 82ULL,
  // IEEE 754 binary128, big endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_IEEE_754_BINARY128_BIG_ENDIAN_TYPED_ARRAY = 83ULL,
  // IEEE 754 binary16, little endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_IEEE_754_BINARY16_LITTLE_ENDIAN_TYPED_ARRAY = 84ULL,
  // IEEE 754 binary32, little endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_IEEE_754_BINARY32_LITTLE_ENDIAN_TYPED_ARRAY = 85ULL,
  // IEEE 754 binary64, little endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_IEEE_754_BINARY64_LITTLE_ENDIAN_TYPED_ARRAY = 86ULL,
  // IEEE 754 binary128, little endian, Typed Array; Ref: [RFC8746]
  CBOR_TAG_IEEE_754_BINARY128_LITTLE_ENDIAN_TYPED_ARRAY = 87ULL,
  // COSE Encrypted Data Object; Ref: [RFC9052]
  CBOR_TAG_COSE_ENCRYPTED_DATA_OBJECT = 96ULL,
  // COSE MACed Data Object; Ref: [RFC9052]
  CBOR_TAG_COSE_MACED_DATA_OBJECT = 97ULL,
  // COSE Signed Data Object; Ref: [RFC9052]
  CBOR_TAG_COSE_SIGNED_DATA_OBJECT = 98ULL,
  // Number of days since the epoch date 1970-01-01; Ref: [RFC8943]
  CBOR_TAG_NUMBER_OF_DAYS_SINCE_THE_EPOCH_DATE_1970_01_01 = 100ULL,
  // alternatives as given by the uint + 128; see Section 9.1; Ref: [draft-bormann-cbor-notable-tags-07]
  CBOR_TAG_ALTERNATIVES_AS_GIVEN_BY_THE_UINT_PLUS_128 = 101ULL,
  // Geographic Coordinates; Ref: [https://github.com/allthingstalk/cbor/blob/master/CBOR-Tag103-Geographic-Coordinates.md][Danilo_Vidovic]
  CBOR_TAG_GEOGRAPHIC_COORDINATES = 103ULL,
  // Geographic Coordinate Reference System WKT or EPSG number; Ref: [draft-clarke-cbor-crs]
  CBOR_TAG_GEO_COORD_REF_SYSTEM_WKT_OR_EPSG_NUM = 104ULL,
  // relative object identifier (BER encoding); SDNV [RFC6256] sequence; Ref: [RFC9090]
  CBOR_TAG_RELATIVE_OBJECT_ID = 110ULL,
  // object identifier (BER encoding); Ref: [RFC9090]
  CBOR_TAG_OBJECT_ID = 111ULL,
  // object identifier (BER encoding), relative to 1.3.6.1.4.1; Ref: [RFC9090]
  CBOR_TAG_OBJECT_ID_RELATIVE_TO_1_3_6_1_4_1 = 112ULL,
  // Internet of Things Data Point; Ref: [https://github.com/allthingstalk/cbor/blob/master/CBOR-Tag120-Internet-of-Things-Data-Points.md][Danilo_Vidovic]
  CBOR_TAG_INTERNET_OF_THINGS_DATA_POINT = 120ULL,
  // Gordian Envelope; Ref: [draft-mcnally-envelope-05]
  CBOR_TAG_GORDIAN_ENVELOPE = 200ULL,
  // mark value as having string references; Ref: [http://cbor.schmorp.de/stringref][Marc_A._Lehmann]
  CBOR_TAG_MARK_VALUE_AS_HAVING_STRING_REFERENCES = 256ULL,
  // Binary MIME message; Ref: [http://peteroupc.github.io/CBOR/binarymime.html][Peter_Occil]
  CBOR_TAG_BINARY_MIME_MSG = 257ULL,
  // Mathematical finite set; Ref: [https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md][Alfredo_Di_Napoli]
  CBOR_TAG_MATHEMATICAL_FINITE_SET = 258ULL,
  // Map datatype with key-value operations (e.g. `.get()/.set()/.delete()`); Ref: [https://github.com/shanewholloway/js-cbor-codec/blob/master/docs/CBOR-259-spec--explicit-maps.md][Shane_Holloway]
  CBOR_TAG_MAP_DATATYPE_WITH_KEY_VAL_OP_SET_DELETE = 259ULL,
  // Network Address (IPv4 or IPv6 or MAC Address) (DEPRECATED in favor of 52 and 54        for IP addresses); Ref: [http://www.employees.org/~ravir/cbor-network.txt][Ravi_Raju][RFC9164]
  CBOR_TAG_NETWORK_ADDRESS = 260ULL,
  // Network Address Prefix (IPv4 or IPv6 Address + Mask Length) (DEPRECATED in favor of 52 and 54        for IP addresses); Ref: [https://github.com/toravir/CBOR-Tag-Specs/blob/master/networkPrefix.md][Ravi_Raju][RFC9164]
  CBOR_TAG_NETWORK_ADDRESS_PREFIX = 261ULL,
  // Embedded JSON Object; Ref: [https://github.com/toravir/CBOR-Tag-Specs/blob/master/embeddedJSON.md][Ravi_Raju]
  CBOR_TAG_EMBEDDED_JSON_OBJECT = 262ULL,
  // Hexadecimal string; Ref: [https://github.com/toravir/CBOR-Tag-Specs/blob/master/hexString.md][Ravi_Raju]
  CBOR_TAG_HEXADECIMAL_STRING = 263ULL,
  // Decimal fraction with arbitrary exponent; Ref: [http://peteroupc.github.io/CBOR/bigfrac.html][Peter_Occil]
  CBOR_TAG_DECIMAL_FRACTION_WITH_ARBITRARY_EXPONENT = 264ULL,
  // Bigfloat with arbitrary exponent; Ref: [http://peteroupc.github.io/CBOR/bigfrac.html][Peter_Occil]
  CBOR_TAG_BIGFLOAT_WITH_ARBITRARY_EXPONENT = 265ULL,
  // Internationalized resource identifier (IRI); Ref: [https://peteroupc.github.io/CBOR/iri.html][Peter_Occil]
  CBOR_TAG_INTERNATIONALIZED_RESOURCE_ID = 266ULL,
  // Internationalized resource identifier reference (IRI reference); Ref: [https://peteroupc.github.io/CBOR/iri.html][Peter_Occil]
  CBOR_TAG_INTERNATIONALIZED_RESOURCE_ID_REF = 267ULL,
  // Extended decimal fraction; Ref: [https://peteroupc.github.io/CBOR/extended.html][Peter_Occil]
  CBOR_TAG_EXTENDED_DECIMAL_FRACTION = 268ULL,
  // Extended bigfloat; Ref: [https://peteroupc.github.io/CBOR/extended.html][Peter_Occil]
  CBOR_TAG_EXTENDED_BIGFLOAT = 269ULL,
  // Extended rational number; Ref: [https://peteroupc.github.io/CBOR/extended.html][Peter_Occil]
  CBOR_TAG_EXTENDED_RATIONAL_NUMBER = 270ULL,
  // DDoS Open Threat Signaling (DOTS) signal channel object, as defined in [RFC9132]; Ref: [RFC9132]
  CBOR_TAG_DDOS_OPEN_THREAT_SIGNALING_SIG_CHN_OBJ = 271ULL,
  // Non-UTF-8 CESU-8 string; Ref: [https://github.com/svaarala/cbor-specs/blob/master/cbor-nonutf8-string-tags.rst][Sami_Vaarala]
  CBOR_TAG_NON_UTF_8_CESU_8_STRING = 272ULL,
  // Non-UTF-8 WTF-8 string; Ref: [https://github.com/svaarala/cbor-specs/blob/master/cbor-nonutf8-string-tags.rst][Sami_Vaarala]
  CBOR_TAG_NON_UTF_8_WTF_8_STRING = 273ULL,
  // Non-UTF-8 MUTF-8 string; Ref: [https://github.com/svaarala/cbor-specs/blob/master/cbor-nonutf8-string-tags.rst][Sami_Vaarala]
  CBOR_TAG_NON_UTF_8_MUTF_8_STRING = 274ULL,
  // Map contains only keys that are of type Text String (major type 3); Ref: [https://github.com/ecorm/cbor-tag-text-key-map][Emile_Cormier]
  CBOR_TAG_MAP_CONTAINS_ONLY_KEYS_THAT_ARE_OF_TYPE_TXT_STR = 275ULL,
  // ERIS binary read capability; Ref: [http://purl.org/eris]
  CBOR_TAG_ERIS_BINARY_READ_CAPABILITY = 276ULL,
  // Universal Geographical Area Description (GAD) shape; see Section 5; Ref: [TS 23.032][Mathew_Meins]
  CBOR_TAG_UNIVERSAL_GEO_AREA_DESCRIPTION_SHAPE = 277ULL,
  // Universal Geographical Area Description (GAD) description of velocity; see Section 8; Ref: [TS 23.032][Mathew_Meins]
  CBOR_TAG_UNIVERSAL_GEO_AREA_DESCRIPTION_DESCRIPTION_OF_VELOCITY = 278ULL,
  // spdm-toc-map; Ref: [TCG DICE Concise Evidence Binding for SPDM][TCG]
  CBOR_TAG_SPDM_TOC_MAP = 570ULL,
  // concise-evidence-map; Ref: [TCG DICE Concise Evidence Binding for SPDM][TCG]
  CBOR_TAG_CONCISE_EVIDENCE_MAP = 571ULL,
  // Detached EAT Bundle [RFC-ietf-rats-eat-25, Section 5]; Ref: [RFC-ietf-rats-eat-25]
  CBOR_TAG_DETACHED_EAT_BUNDLE = 602ULL,
  // [RFC-ietf-cbor-time-tag-12] extended time; Ref: [RFC-ietf-cbor-time-tag-12]
  CBOR_TAG_EXTENDED_TIME = 1001ULL,
  // [RFC-ietf-cbor-time-tag-12] duration; Ref: [RFC-ietf-cbor-time-tag-12]
  CBOR_TAG_DURATION = 1002ULL,
  // [RFC-ietf-cbor-time-tag-12] period; Ref: [RFC-ietf-cbor-time-tag-12]
  CBOR_TAG_PERIOD = 1003ULL,
  // [RFC3339] full-date string; Ref: [RFC8943]
  CBOR_TAG_FULL_DATE_STRING = 1004ULL,
  // Object type identifier; Ref: [draft-rundgren-cotx-04]
  CBOR_TAG_OBJECT_TYPE_ID = 1010ULL,
  // Multi-dimensional Array, column-major order; Ref: [RFC8746]
  CBOR_TAG_MULTI_DIMENSIONAL_ARRAY_COLUMN_MAJOR_ORDER = 1040ULL,
  // IEEE OUI/CID; Ref: [RFC9542]
  CBOR_TAG_IEEE_OUI_CID = 1048ULL,
  // [COSE algorithm identifier, Base Hash value]; Ref: [draft-bormann-cbor-notable-tags-09, Section 3.1.1]
  CBOR_TAG_COSE_ALGORITHM_ID_BASE_HASH_VALUE = 18556ULL,
  // I-Regexp; Ref: [draft-bormann-cbor-notable-tags-09, Section 2.1][draft-ietf-jsonpath-iregexp-08]
  CBOR_TAG_I_REGEXP = 21065ULL,
  // ECMAScript RegExp [https://262.ecma-international.org/14.0/#sec-regexp-regular-expression-objects]; Ref: [https://github.com/hildjj/cbor-specs/blob/main/regexp.md][Joe_Hildebrand]
  CBOR_TAG_ECMASCRIPT_REGEXP = 21066ULL,
  // hint that indicates an additional level of indirection; Ref: [http://cbor.schmorp.de/indirection][Marc_A._Lehmann]
  CBOR_TAG_HINT_THAT_INDICATES_AN_ADD_LVL_OF_INDIRECTION = 22098ULL,
  // Capture [3]; Ref: [https://github.com/japhb/cbor-specs/blob/main/capture.md][Geoffrey_Broadwell]
  CBOR_TAG_CAPTURE = 25441ULL,

  /* 32768-65535 : First Come First Served (16-bit) */
  // Identifier for a FHIR constant; Ref: [Stefan_Genchev]
  CBOR_TAG_ID_FOR_A_FHIR_CONSTANT = 32768ULL,
  // External reference; Ref: [https://gitlab.com/Hawk777/cbor-specs/-/blob/main/external-reference.md][Christopher_Head]
  CBOR_TAG_EXTERNAL_REF = 32769ULL,
  // ur:known-value, Semantic signifier; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_KNOWN_VALUE_SEMANTIC_SIGNIFIER = 40000ULL,
  // ur:digest, 32-byte SHA-256 digest; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_DIGEST_32_BYTE_SHA_256_DIGEST = 40001ULL,
  // ur:encrypted, IETF ChaCha20-Poly1305 ([RFC8439]) encrypted message; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_ENCRYPTED_IETF_CHACHA20_POLY1305_ENCRYPTED_MSG = 40002ULL,
  // ur:compressed, [RFC1951] DEFLATE-compressed message; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_COMPRESSED_DEFLATE_COMPRESSED_MSG = 40003ULL,
  // ur:request, Transaction Request identifier; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_REQUEST_TRANSACTION_REQUEST_ID = 40004ULL,
  // ur:response, Transaction response identifier; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_RESPONSE_TRANSACTION_RESPONSE_ID = 40005ULL,
  // ur:function, Envelope expression function identifier; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_FUNCTION_ENVELOPE_EXPRESSION_FUNCTION_ID = 40006ULL,
  // ur:parameter, Envelope expression parameter identifier; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_PARAM_ENVELOPE_EXPRESSION_PARAM_ID = 40007ULL,
  // ur:placeholder, Envelope expression placeholder identifier; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_PLACEHOLDER_ENVELOPE_EXPRESSION_PLACEHOLDER_ID = 40008ULL,
  // ur:replacement, Envelope expression replacement identifier; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_REPLACEMENT_ENVELOPE_EXPRESSION_REPLACEMENT_ID = 40009ULL,
  // ur:agreement-private-key, Curve25519 private key for X25519 key agreement; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_AGREEMENT_PRIVATE_KEY_CURVE25519_PRIVATE_KEY_FOR_X25519_KEY_AGREEMENT = 40010ULL,
  // ur:agreement-public-key, Curve25519 public key for X25519 key agreement; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_AGREEMENT_PUBLIC_KEY_CURVE25519_PUBLIC_KEY_FOR_X25519_KEY_AGREEMENT = 40011ULL,
  // ur:arid, Apparently Random Identifier; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_ARID_APPARENTLY_RANDOM_ID = 40012ULL,
  // ur:nonce, Cryptographic nonce; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_NONCE_CRYPTOGRAPHIC_NONCE = 40014ULL,
  // ur:password, Scrypt-hashed password; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_PASSWORD_SCRYPT_HASHED_PASSWORD = 40015ULL,
  // ur:crypto-prvkeys, Private key base (key material); Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_CRYPTO_PRVKEYS_PRIVATE_KEY_BASE = 40016ULL,
  // ur:crypto-pubkeys, Public key base (signing and agreement public key bundle); Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_CRYPTO_PUBKEYS_PUBLIC_KEY_BASE = 40017ULL,
  // ur:salt, Random salt used for hash tree decorrelation; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_SALT_RANDOM_SALT_USED_FOR_HASH_TREE_DECORRELATION = 40018ULL,
  // ur:crypto-sealed, Encrypted message and ephemeral public key; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_CRYPTO_SEALED_ENCRYPTED_MSG_EPHEMERAL_PUBLIC_KEY = 40019ULL,
  // ur:signature, Cryptographic signature; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_SIGNATURE_CRYPTOGRAPHIC_SIGNATURE = 40020ULL,
  // ur:signing-private-key, Cryptographic private key used for signing; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_SIGNING_PRIVATE_KEY_CRYPTOGRAPHIC_PRIVATE_KEY_USED_FOR_SIGNING = 40021ULL,
  // ur:signing-public-key, Cryptographic public key used for signing; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_SIGNING_PUBLIC_KEY_CRYPTOGRAPHIC_PUBLIC_KEY_USED_FOR_SIGNING = 40022ULL,
  // ur:crypto-key, Cryptographic key used for symmetric encryption; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_CRYPTO_KEY_CRYPTOGRAPHIC_KEY_USED_FOR_SYMMETRIC_ENCRYPTION = 40023ULL,
  // ur:seed, Cryptographic seed; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_SEED_CRYPTOGRAPHIC_SEED = 40300ULL,
  // ur:hdkey, Bitcoin BIP-32 HD key; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_HDKEY_BITCOIN_BIP_32_HD_KEY = 40303ULL,
  // ur:keypath, Bitcoin BIP-32 key derivation path; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_KEYPATH_BITCOIN_BIP_32_KEY_DERIVATION_PATH = 40304ULL,
  // ur:coin-info, Cryptographic asset and network specifier; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_COIN_INFO_CRYPTOGRAPHIC_ASSET_NETWORK_SPECIFIER = 40305ULL,
  // ur:eckey, Bitcoin elliptic curve key (private or public); Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_ECKEY_BITCOIN_ELLIPTIC_CURVE_KEY = 40306ULL,
  // ur:address, Cryptocurrency address; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_ADDRESS_CRYPTOCURRENCY_ADDRESS = 40307ULL,
  // ur:output-descriptor, Bitcoin output descriptor; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_OUTPUT_DESCRIPTOR_BITCOIN_OUTPUT_DESCRIPTOR = 40308ULL,
  // ur:sskr, Sharded Secret Key Reconstruction (SSKR) shear; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_SSKR_SHARDED_SECRET_KEY_RECONSTRUCTION_SHEAR = 40309ULL,
  // ur:psbt, Partially Signed Bitcoin Transaction; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_PSBT_PARTIALLY_SIGNED_BITCOIN_TRANSACTION = 40310ULL,
  // ur:account, Bitcoin output descriptor bundle; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_ACCOUNT_BITCOIN_OUTPUT_DESCRIPTOR_BUNDLE = 40311ULL,
  // ur:ssh-private, Text format SSH private key; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_SSH_PRIVATE_TEXT_FORMAT_SSH_PRIVATE_KEY = 40800ULL,
  // ur:ssh-public, Text format SSH public key; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_SSH_PUBLIC_TEXT_FORMAT_SSH_PUBLIC_KEY = 40801ULL,
  // ur:ssh-signature, Text format SSH signature; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_SSH_SIGNATURE_TEXT_FORMAT_SSH_SIGNATURE = 40802ULL,
  // ur:ssh-certificate, Text format SSH certificate; Ref: [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-006-urtypes.md][Wolf_McNally]
  CBOR_TAG_UR_SSH_CERTIFICATE_TXT_FORMAT_SSH_CERTIFICATE = 40803ULL,
  // A confidentiality clearance. The key value pairs of the map are defined in ADatP-4774.4; Ref: [Aidan_Murdock]
  CBOR_TAG_A_CONFIDENTIALITY_CLEARANCE = 42600ULL,
  // A metadata binding. The elements of the array are defined in AdatP-4778.5. The tag is also used as part of the magic number in on-disk detached and encapsulating bindings.; Ref: [Aidan_Murdock]
  CBOR_TAG_A_METADATA_BINDING = 42601ULL,
  // A collection of NCMS metadata elements. The key value pairs of the map are defined in AdatP-5636.4; Ref: [Aidan_Murdock]
  CBOR_TAG_A_COLLECTION_OF_NCMS_METADATA_ELEMENTS = 42602ULL,
  // Single complex number: array elements are real (I) and imaginary (Q) components; Ref: [Saajan_Chana]
  CBOR_TAG_SINGLE_COMPLEX_NUMBER = 43000ULL,
  // Array of complex numbers in interleaved form: complex value k is stored with real (I) part at array index 2k and imaginary (Q) part at index (2k + 1); Ref: [Saajan_Chana]
  CBOR_TAG_ARRAY_OF_COMPLEX_NUMBERS_IN_INTERLEAVED_FORM = 43001ULL,
  // PlatformV_IS_ID; Ref: [https://github.com/arthurwangtz/platformv-cbor][Wang_Tongzhou]
  CBOR_TAG_PLATFORMV_IS_ID = 50000ULL,
  // PlatformV_IS_NAME; Ref: [https://github.com/arthurwangtz/platformv-cbor][Wang_Tongzhou]
  CBOR_TAG_PLATFORMV_IS_NAME = 50001ULL,
  // PlatformV_IS_VALUE; Ref: [https://github.com/arthurwangtz/platformv-cbor][Wang_Tongzhou]
  CBOR_TAG_PLATFORMV_IS_VALUE = 50002ULL,
  // PlatformV_HAS_COMPOSITE_VALUE; Ref: [https://github.com/arthurwangtz/platformv-cbor][Wang_Tongzhou]
  CBOR_TAG_PLATFORMV_HAS_COMPOSITE_VALUE = 50003ULL,
  // PlatformV_HAS_MAPPED_VALUE; Ref: [https://github.com/arthurwangtz/platformv-cbor][Wang_Tongzhou]
  CBOR_TAG_PLATFORMV_HAS_MAPPED_VALUE = 50004ULL,
  // PlatformV_HAS_OBJ_ID; Ref: [https://github.com/arthurwangtz/platformv-cbor][Wang_Tongzhou]
  CBOR_TAG_PLATFORMV_HAS_OBJ_ID = 50005ULL,
  // PlatformV_HAS_OBJ_TAG; Ref: [https://github.com/arthurwangtz/platformv-cbor][Wang_Tongzhou]
  CBOR_TAG_PLATFORMV_HAS_OBJ_TAG = 50006ULL,
  // PlatformV_HAS_CHILD; Ref: [https://github.com/arthurwangtz/platformv-cbor][Wang_Tongzhou]
  CBOR_TAG_PLATFORMV_HAS_CHILD = 50007ULL,
  // PlatformV_HAS_PROPERTY; Ref: [https://github.com/arthurwangtz/platformv-cbor][Wang_Tongzhou]
  CBOR_TAG_PLATFORMV_HAS_PROPERTY = 50008ULL,
  // PlatformV_HAS_META; Ref: [https://github.com/arthurwangtz/platformv-cbor][Wang_Tongzhou]
  CBOR_TAG_PLATFORMV_HAS_META = 50009ULL,
  // PlatformV_HAS_EVENT; Ref: [https://github.com/arthurwangtz/platformv-cbor][Wang_Tongzhou]
  CBOR_TAG_PLATFORMV_HAS_EVENT = 50010ULL,
  // PlatformV_HAS_ACTION; Ref: [https://github.com/arthurwangtz/platformv-cbor][Wang_Tongzhou]
  CBOR_TAG_PLATFORMV_HAS_ACTION = 50011ULL,
  // PlatformV_IS_TYPE; Ref: [https://github.com/arthurwangtz/platformv-cbor][Wang_Tongzhou]
  CBOR_TAG_PLATFORMV_IS_TYPE = 50012ULL,
  // Self-described CBOR; see Section 3.4.6; Ref: [RFC8949]
  CBOR_TAG_SELF_DESCRIBED_CBOR = 55799ULL,
  // indicates that the file contains CBOR Sequences; Ref: [RFC9277]
  CBOR_TAG_INDICATES_THAT_FILE_CONTAINS_CBOR_SEQUENCES = 55800ULL,
  // indicates that the file starts with a CBOR-Labeled Non-CBOR Data label.; Ref: [RFC9277]
  CBOR_TAG_INDICATES_THAT_FILE_STARTS_WITH_CBOR_LABELED_NON_CBOR_DATA_LABEL = 55801ULL,
  // Compressed byte string; Ref: [https://github.com/dectris/documentation/blob/main/cbor/dectris-compression-tag.md][Dirk_Boye]
  CBOR_TAG_COMPRESSED_BYTE_STRING = 56500ULL,
  // Identify and define a set of record structures (each a sequence of property names) that can be referenced as tags in the included value (and the scope for the record tag definitions); Ref: [https://github.com/kriszyp/cbor-records][Kris_Zyp]
  CBOR_TAG_IDENT_DEFINE_SET_OF_REC_STRCT_THAT_CAN_BE_REF_AS_TAGS_IN_INC_VAL = 57342ULL,
  // Identify and define a record structure (a sequence of property names), and use that record structure definition to interpret the included values.; Ref: [https://github.com/kriszyp/cbor-records][Kris_Zyp]
  CBOR_TAG_IDENT_DEFINE_REC_STRCT_USE_THAT_REC_STRCT_DEF_INTERPRET_INC_VALS = 57343ULL,
  // The tagged CBOR array contains attestation evidence data with an Intel TEE quote.; Ref: [Shanwei_Cen]
  CBOR_TAG_TAGGED_CBOR_ARRAY_CONTAINS_ATTEST_EVIDENCE_DATA_WITH_AN_INTEL_TEE_QUOTE = 60000ULL,
  // The tagged CBOR array contains attestation evidence data with an Intel TEE report.; Ref: [Shanwei_Cen]
  CBOR_TAG_TAGGED_CBOR_ARRAY_CONTAINS_ATTEST_EVIDENCE_DATA_WITH_AN_INTEL_TEE_RPT = 60001ULL,
  // The tagged CBOR array contains attestation evidence data with an Intel SGX report.; Ref: [Shanwei_Cen]
  CBOR_TAG_TAGGED_CBOR_ARRAY_CONTAINS_ATTEST_EVIDENCE_DATA_WITH_AN_INTEL_SGX_RPT = 60002ULL,
  // invalid 16bit; Ref: [draft-bormann-cbor-notable-tags-02]
  CBOR_TAG_INVALID_16BIT = 65535ULL,

  /* 65536-4294967295 : First Come First Served (32-bit) */
  // RAINS Message; Ref: [https://britram.github.io/rains-prototype][Brian_Trammell]
  CBOR_TAG_RAINS_MSG = 15309736ULL,
  // A CBOR encoded Openswan configuration file, as stored on disk forunit test cases.; Ref: [Michael_Richardson][Samir_Hussain]
  CBOR_TAG_CBOR_ENC_OPENSWAN_CONFIG_FILE_AS_STORED_ON_DISK_FORUNIT_TEST_CASES = 1330664270ULL,
  // Concise Software Identifier (CoSWID); Ref: [RFC9393]
  CBOR_TAG_CONCISE_SOFTWARE_ID = 1398229316ULL,
  // Array of content-addressed blocks and ERIS read capabilities; Ref: [Endo_Renberg]
  CBOR_TAG_ARRAY_OF_CONTENT_ADDR_BLOCKS_ERIS_READ_CAP = 1701996915ULL,
  // ERIS-FS image header; Ref: [Endo_Renberg]
  CBOR_TAG_ERIS_FS_IMAGE_HEADER = 1701996916ULL,
  // invalid 32bit; Ref: [draft-bormann-cbor-notable-tags-02]
  CBOR_TAG_INVALID_32BIT = 4294967295ULL,

  /* 4294967296-18446744073709551615 : First Come First Served (64-bit) */
  // Intel FPGA SPDM Manifest; Ref: [Andrew_Draper]
  CBOR_TAG_INTEL_FPGA_SPDM_MANIFEST = 4294967296ULL,
  // invalid 64bit; Ref: [draft-bormann-cbor-notable-tags-02]
  CBOR_TAG_INVALID_64BIT = 18446744073709551615ULL
} cbor_tag_t;

